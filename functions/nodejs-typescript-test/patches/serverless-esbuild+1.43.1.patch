diff --git a/node_modules/serverless-esbuild/dist/helper.js b/node_modules/serverless-esbuild/dist/helper.js
index d57c311..c813e3e 100644
--- a/node_modules/serverless-esbuild/dist/helper.js
+++ b/node_modules/serverless-esbuild/dist/helper.js
@@ -215,11 +215,18 @@ const googleNodeMatcher = {
     nodejs14: 'node14',
     nodejs12: 'node12',
 };
-const nodeMatcher = { ...googleNodeMatcher, ...awsNodeMatcher, ...azureNodeMatcher };
+const scalewayNodeMatcher = {
+    node20: 'node20',
+    node18: 'node18',
+    node16: 'node16',
+    node14: 'node14',
+    node12: 'node12',
+};
+const nodeMatcher = { ...googleNodeMatcher, ...awsNodeMatcher, ...azureNodeMatcher, ...scalewayNodeMatcher };
 exports.providerRuntimeMatcher = Object.freeze({
     aws: awsNodeMatcher,
     azure: azureNodeMatcher,
     google: googleNodeMatcher,
+    scaleway: scalewayNodeMatcher
 });
 const isNodeMatcherKey = (input) => typeof input === 'string' && Object.keys(nodeMatcher).includes(input);
 exports.isNodeMatcherKey = isNodeMatcherKey;
diff --git a/node_modules/serverless-esbuild/dist/pack.js b/node_modules/serverless-esbuild/dist/pack.js
index a6ff2f4..6531fd3 100644
--- a/node_modules/serverless-esbuild/dist/pack.js
+++ b/node_modules/serverless-esbuild/dist/pack.js
@@ -64,10 +64,12 @@ exports.filterFilesForZipPackage = filterFilesForZipPackage;
 async function pack() {
     // GOOGLE Provider requires a package.json and NO node_modules
     const isGoogleProvider = this.serverless?.service?.provider?.name === 'google';
+    const isScalewayProvider = this.serverless?.service?.provider?.name === 'scaleway';
+    const providerName = this.serverless?.service?.provider?.name
     const excludedFiles = isGoogleProvider ? [] : excludedFilesDefault;
     // Google provider cannot use individual packaging for now - this could be built in a future release
-    if (isGoogleProvider && this.serverless?.service?.package?.individually) {
-        throw new Error('Packaging failed: cannot package function individually when using Google provider');
+    if ((isGoogleProvider || isScalewayProvider) && this.serverless?.service?.package?.individually) {
+        throw new Error(`Packaging failed: cannot package function individually when using ${providerName} provider`);
     }
     const { buildDirPath, workDirPath } = this;
     (0, helper_1.assertIsString)(buildDirPath, 'buildDirPath is not a string');
